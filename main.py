# Form implementation generated from reading ui file 'test.ui'
#
# Created by: PyQt6 UI code generator 6.4.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
import sys
import os

from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtCore import QSize
from PyQt6.QtGui import QPixmap
from PyQt6.QtWidgets import QWidget, QTabWidget, QVBoxLayout, QLabel, QRadioButton, QButtonGroup
from PyQt6.QtWidgets import QMessageBox

from Task1 import run1, create_csv_annotation
from Task2 import run2
from Task3 import run3
from Task5 import Iterator1_img


class Ui_MainWindow(QWidget):
    def setupUi(self, MainWindow) -> None:
        """function for working with a GUI object"""
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(640, 480)
        self.folder = None
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(160, 10, 311, 32))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(0, 90, 211, 32))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(220, 90, 201, 32))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(430, 90, 201, 32))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(220, 150, 201, 32))  # 315, 110, 211, 32
        self.pushButton_5.setObjectName("pushButton_2")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 640, 24))
        self.menubar.setObjectName("menubar")
        self.menuMenu1 = QtWidgets.QMenu(self.menubar)
        self.menuMenu1.setObjectName("menuMenu1")
        self.menuMenu2 = QtWidgets.QMenu(self.menubar)
        self.menuMenu2.setObjectName("menuMenu2")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menuMenu1.addSeparator()
        self.menubar.addAction(self.menuMenu1.menuAction())
        self.menubar.addAction(self.menuMenu2.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow) -> None:
        """a function for translating the text of buttons and working with buttons"""
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "Выбрать путь к датасету"))
        self.pushButton_2.setText(_translate("MainWindow", "Создание Аннотации Task1"))
        self.pushButton_3.setText(_translate("MainWindow", "Создание Аннотации Task2"))
        self.pushButton_4.setText(_translate("MainWindow", "Создание Аннотации Task3"))
        self.pushButton_5.setText(_translate("MainWindow", "Работа с изображениями"))
        self.menuMenu1.setTitle(_translate("MainWindow", "Menu1"))
        self.menuMenu2.setTitle(_translate("MainWindow", "Menu2"))

        self.pushButton.clicked.connect(self.get_folder)
        self.pushButton_2.clicked.connect(self.task1)
        self.pushButton_3.clicked.connect(self.task2)
        self.pushButton_4.clicked.connect(self.task3)
        self.pushButton_5.clicked.connect(self.openDialog)

    def get_folder(self) -> None:
        """function for selecting the path to the project"""
        self.folder = QtWidgets.QFileDialog.getExistingDirectory(self, "Выбрать папку исходного датасета")
        try:
            os.chdir(self.folder)
            print(self.folder)
        except:
            error = QMessageBox()
            error.setWindowTitle("Error")
            error.setText("Папка не выбрана")
            # error.setIcon(self, QMessageBox.warning)
            # error.StandardButton(QMessageBox.close())
            error.exec()

    def task1(self) -> None:
        """function to execute task1"""
        run1(self.folder, 'tiger', 'annotationLAB3TIGER')
        run1(self.folder, 'leopard', 'annotationLAB3Leopard')
        compleate = QMessageBox()
        compleate.setWindowTitle("OK")
        compleate.setText("Задача выполнена")
        compleate.exec()

    def task2(self) -> None:
        """function to execute task2"""
        run2(self.folder, "datasetTask1", "Task2Annotation")
        compleate = QMessageBox()
        compleate.setWindowTitle("OK")
        compleate.setText("Задача выполнена")
        compleate.exec()

    def task3(self) -> None:
        """function to execute task3"""
        run3(self.folder, 'annotationTASK3.csv', 'datasetcopy2')
        compleate = QMessageBox()
        compleate.setWindowTitle("OK")
        compleate.setText("Задача выполнена")
        compleate.exec()

    def openDialog(self) -> None:
        """function for opening a new window"""
        dialog = ClssDialog(self)
        dialog.exec()


class ClssDialog(QtWidgets.QDialog):
    def __init__(self, parent=None) -> None:
        """constructor"""
        super(ClssDialog, self).__init__(parent)
        self.__iterator = Iterator1_img("/Users/vadimkotlarskij/Desktop/Python/Lab3TEST", "tiger", "dataset")
        self.__pixmap = QPixmap('.jpg')
        self.resize(640, 650)
        self.verticalLayout = QtWidgets.QGridLayout(self)
        self.verticalLayout.setObjectName("verticalLayout")
        self.pushButton = QtWidgets.QPushButton(self)
        self.pushButton.setObjectName("pushButton")
        self.pushButton.setGeometry(QtCore.QRect(270, 600, 100, 32))
        self.verticalLayout.setSpacing(10)
        self.setLayout(self.verticalLayout)
        self.setGeometry(300, 300, 350, 300)

        self.pushButton_3 = QtWidgets.QPushButton(self)
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.setGeometry(QtCore.QRect(270, 90, 100, 32))

        self.verticalLayout.addWidget(self.pushButton)
        self.setWindowTitle("ImageTask")
        self.pushButton.setText("Next")
        self.pushButton.clicked.connect(self.__nextButton)
        self.pushButton_3.setText("Close")
        self.pushButton_3.clicked.connect(self.btnClosed)
        self.verticalLayout.addWidget(self.pushButton_3)

        pixmap = QPixmap("/Users/vadimkotlarskij/Desktop/Python/Lab3TEST/dataset/tiger/0000.jpg").scaledToWidth(
            600).scaledToHeight(400)
        self.__lable = QLabel(self)

        self.__lable.setPixmap(pixmap)

        self.verticalLayout.addWidget(self.__lable)

        self.radio_button_1 = QRadioButton('tiger')
        self.radio_button_1.setChecked(True)
        self.radio_button_1.setAccessibleName("tiger")

        self.radio_button_2 = QRadioButton('leopard')
        self.radio_button_2.setAccessibleName("leopard")

        self.verticalLayout.addWidget(self.radio_button_1)
        self.verticalLayout.addWidget(self.radio_button_2)
        self.radio_button_1.clicked.connect(self.buttonClicked)
        self.radio_button_2.clicked.connect(self.buttonClicked)

    def buttonClicked(self) -> None:
        """a function that checks which class of animal is selected in the radio button"""
        sender = self.sender()
        if sender.text() == 'tiger':
            self.__iterator.setName(sender.text())
            self.__iterator.getName()

        elif sender.text() == 'leopard':
            self.__iterator.setName(sender.text())
            self.__iterator.getName()

    def __nextButton(self, ) -> None:
        """toggle next and operate with exception"""
        try:
            tmp = os.path.join(os.path.join(self.__iterator.dataset, self.__iterator.path, self.__iterator.name),
                               self.__iterator.__next__())
            print(tmp)
            self.__pixmap = QPixmap(f"{tmp}").scaledToWidth(600).scaledToHeight(400)
            self.__lable.setPixmap(self.__pixmap)
            print(tmp)
        except:
            reply = QMessageBox.question(self, 'End of img_class',
                                         "empry, clear?", QMessageBox.Yes |
                                         QMessageBox.No, QMessageBox.Yes)
            if reply == QMessageBox.Yes:
                self.__iterator.clear()
            print("Error")

    def btnClosed(self) -> None:
        """window closing function"""
        self.close()


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
